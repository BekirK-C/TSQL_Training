-- WHAT IS TRIGGER
--In SQL, a trigger is a special type of stored procedure that is executed automatically by the database management system (DBMS) in response to certain events. 
--Triggers are typically used to enforce business rules or maintain database integrity, or to perform additional tasks when certain data changes occur.


-- INSERT ISLEMI ICIN TRIGGER
CREATE TRIGGER TRG_TRANSACTIONS_INSERT
ON ITEMTRANSACTIONS
AFTER INSERT
AS
BEGIN

DECLARE @ITEMID AS INT
DECLARE @AMOUNT AS INT
DECLARE @IOTYPE AS SMALLINT

	SELECT @ITEMID = ITEMID, @AMOUNT = AMOUNT, @IOTYPE = IOTYPE FROM inserted 

	IF @IOTYPE = 1
		UPDATE STOCK SET STOCK = STOCK + @AMOUNT WHERE ITEMID = @ITEMID
	IF @IOTYPE = 2
		UPDATE STOCK SET STOCK = STOCK - @AMOUNT WHERE ITEMID = @ITEMID

END
-- INSERT ISLEMI ICIN TRIGGER



-- DELETE ISLEMI ICIN TRIGGER
CREATE TRIGGER TRG_TRANSACTIONS_DELETE
ON ITEMTRANSACTIONS
AFTER DELETE
AS
BEGIN

DECLARE @ITEMID AS INT
DECLARE @AMOUNT AS INT
DECLARE @IOTYPE AS SMALLINT

	SELECT @ITEMID = ITEMID, @AMOUNT = AMOUNT, @IOTYPE = IOTYPE FROM deleted

	IF @IOTYPE = 1
		UPDATE STOCK SET STOCK = STOCK - @AMOUNT WHERE ITEMID = @ITEMID
	IF @IOTYPE = 2
		UPDATE STOCK SET STOCK = STOCK + @AMOUNT WHERE ITEMID = @ITEMID

END
-- DELETE ISLEMI ICIN TRIGGER



-- UPDATE ISLEMI ICIN TRIGGER
CREATE TRIGGER TRG_TRANSACTIONS_UPDATE
ON ITEMTRANSACTIONS
AFTER UPDATE
AS
BEGIN

DECLARE @ITEMID AS INT
DECLARE @IOTYPE AS INT
DECLARE @OLDAMOUNT AS INT
DECLARE @NEWAMOUNT AS INT
DECLARE @AMOUNT AS INT

SELECT @ITEMID = ITEMID, @IOTYPE = IOTYPE, @OLDAMOUNT = AMOUNT FROM deleted
SELECT @NEWAMOUNT = AMOUNT FROM inserted

SELECT @AMOUNT = @OLDAMOUNT - @NEWAMOUNT

IF @IOTYPE = 1
	UPDATE STOCK SET STOCK = STOCK - @AMOUNT WHERE ITEMID = @ITEMID
IF @IOTYPE = 2
	UPDATE STOCK SET STOCK = STOCK + @AMOUNT WHERE ITEMID = @ITEMID

END
-- UPDATE ISLEMI ICIN TRIGGER



-- TRIGGER ICIN TABLODA DENEME SORGULARI (INSERT-DELETE-UPDATE)
INSERT INTO ITEMTRANSACTIONS (ITEMID, AMOUNT, IOTYPE, DATE_)
VALUES (1, 5, 2, GETDATE())

DELETE FROM ITEMTRANSACTIONS WHERE ID = 86

UPDATE ITEMTRANSACTIONS SET AMOUNT = 10 WHERE ID = 1





--KULLANILAN TUM TABLOLAR RASTGELE OLUSTURULMUSTUR


-- RASTGELE ITEMS TABLOSU OLUSTURMA
DECLARE @ITEMCODE AS VARCHAR(50)
DECLARE @ITEMNAME AS VARCHAR(50)
DECLARE @I AS INT = 1

WHILE @I < 500
BEGIN
	IF @I < 10
	BEGIN
		SET @ITEMCODE = 'URUN000' + CAST(@I AS varchar)
		SET @ITEMNAME = 'URUN' + CAST(@I AS varchar)
		INSERT INTO ITEMS (ITEMCODE, ITEMNAME)
		VALUES (@ITEMCODE, @ITEMNAME)
	END
	ELSE IF @I < 100
	BEGIN
		SET @ITEMCODE = 'URUN00' + CAST(@I AS varchar)
		SET @ITEMNAME = 'URUN' + CAST(@I AS varchar)
		INSERT INTO ITEMS (ITEMCODE, ITEMNAME)
		VALUES (@ITEMCODE, @ITEMNAME)
	END
	ELSE IF @I < 1000
	BEGIN
		SET @ITEMCODE = 'URUN0' + CAST(@I AS varchar)
		SET @ITEMNAME = 'URUN' + CAST(@I AS varchar)
		INSERT INTO ITEMS (ITEMCODE, ITEMNAME)
		VALUES (@ITEMCODE, @ITEMNAME)
	END
	
	SET @I = @I + 1
END
-- RASTGELE ITEMS TABLOSU OLUSTURMA



-- RASTGELE ITEMTRANSACTIONS TABLOSU OLUSTURMA
DECLARE @ITEMID AS INT
DECLARE @DATE AS DATETIME
DECLARE @AMOUNT AS INT
DECLARE @IOTYPE AS SMALLINT
DECLARE @I AS INT = 1

WHILE @I < 1000
BEGIN
	SET @ITEMID = ROUND(RAND()*500,0) + 1
	SET @DATE = DATEADD(DAY,-ROUND(RAND()*365,0), GETDATE())
	SET @AMOUNT = ROUND(RAND()*9,0) + 1
	SET @IOTYPE = ROUND(RAND()*1,0) + 1

	INSERT INTO ITEMTRANSACTIONS (ITEMID, DATE_, AMOUNT, IOTYPE)
	VALUES (@ITEMID, @DATE, @AMOUNT, @IOTYPE)

	SET @I = @I + 1
END
-- RASTGELE ITEMTRANSACTIONS TABLOSU OLUSTURMA



-- ITEMTRANSACTIONS AMOUNT BILGISINE GORE STOK TABLOSUNU OLUSTURMA
SELECT ITM.ID, 
(SELECT SUM(AMOUNT)FROM ITEMTRANSACTIONS WHERE ITEMID = ITM.ID AND IOTYPE = 1)
-
(SELECT SUM(AMOUNT)FROM ITEMTRANSACTIONS WHERE ITEMID = ITM.ID AND IOTYPE = 2) AS STOK
FROM ITEMS ITM 
ORDER BY ITM.ID
-- ITEMTRANSACTIONS AMOUNT BILGISINE GORE STOK TABLOSUNU OLUSTURMA

